basePath: /api
definitions:
  category.AddCategoryBody:
    properties:
      cat_id:
        type: integer
      cat_name:
        type: string
    type: object
  category.UpdateCategoryBody:
    properties:
      cat_id:
        type: integer
      cat_name:
        type: string
    type: object
  mark.AddMarkBody:
    properties:
      mar_id:
        type: integer
      mar_name:
        type: string
    type: object
  mark.UpdateMarkBody:
    properties:
      mar_id:
        type: integer
      mar_name:
        type: string
    type: object
  models.Category:
    properties:
      cat_id:
        type: integer
      cat_name:
        type: string
    type: object
  models.Mark:
    properties:
      mar_id:
        type: integer
      mar_name:
        type: string
    type: object
  models.Product:
    properties:
      category_cat_id:
        $ref: '#/definitions/models.Category'
      mark_mar_id:
        $ref: '#/definitions/models.Mark'
      pro_description:
        type: string
      pro_experydate:
        type: string
      pro_id:
        type: integer
      pro_name:
        type: string
      pro_photo:
        type: string
      pro_price:
        type: integer
      product_pro_id:
        $ref: '#/definitions/models.Product'
      tax_tax_id:
        $ref: '#/definitions/models.Tax'
      unit_measure_uni_id:
        $ref: '#/definitions/models.Unit_Measure'
    type: object
  models.Tax:
    properties:
      tax_id:
        type: integer
      tax_name:
        type: string
      tax_rate:
        type: number
    type: object
  models.Unit_Measure:
    properties:
      uni_abbreviation:
        type: string
      uni_id:
        type: integer
      uni_measure:
        type: string
    type: object
  product.AddProductBody:
    properties:
      category_cat_id:
        $ref: '#/definitions/models.Category'
      mark_mar_id:
        $ref: '#/definitions/models.Mark'
      pro_description:
        type: string
      pro_experydate:
        type: string
      pro_id:
        type: integer
      pro_name:
        type: string
      pro_photo:
        type: string
      pro_price:
        type: integer
      product_pro_id:
        $ref: '#/definitions/models.Product'
      tax_tax_id:
        $ref: '#/definitions/models.Tax'
      unit_measure_uni_id:
        $ref: '#/definitions/models.Unit_Measure'
    type: object
  product.UpdateMarkBody:
    properties:
      mar_id:
        type: integer
      mar_name:
        type: string
    type: object
  tax.AddTaxBody:
    properties:
      tax_id:
        type: integer
      tax_name:
        type: string
      tax_rate:
        type: number
    type: object
  tax.UpdateTaxBody:
    properties:
      tax_id:
        type: integer
      tax_name:
        type: string
      tax_rate:
        type: number
    type: object
  unit_measure.AddUnit_MeasureBody:
    properties:
      uni_abbreviation:
        type: string
      uni_id:
        type: integer
      uni_measure:
        type: string
    type: object
  unit_measure.UpdateUnit_MeasureBody:
    properties:
      uni_abbreviation:
        type: string
      uni_id:
        type: integer
      uni_measure:
        type: string
    type: object
host: localhost:3000
info:
  contact: {}
  description: A Tag service API in Go using Gin framework
  title: Tag Service API
  version: "1.0"
paths:
  /categories:
    get:
      description: Return list of categories.
      responses:
        "200":
          description: Categories successfully recovered.
          schema:
            type: obejct
      summary: Get All categories.
      tags:
      - categories
    post:
      description: Save categories data in Db.
      parameters:
      - description: Create categorys
        in: body
        name: categories
        required: true
        schema:
          $ref: '#/definitions/category.AddCategoryBody'
      produces:
      - application/json
      responses:
        "200":
          description: successfully created category.
          schema:
            $ref: '#/definitions/models.Category'
      summary: Create categories
      tags:
      - categories
    put:
      description: Update categories data.
      parameters:
      - description: Update tags
        in: body
        name: categories
        required: true
        schema:
          $ref: '#/definitions/category.UpdateCategoryBody'
      produces:
      - application/json
      responses:
        "200":
          description: Category updated successfully.
          schema:
            $ref: '#/definitions/models.Category'
      summary: Update categories
      tags:
      - categories
  /categories/{id}:
    delete:
      description: Remove categories data by id.
      parameters:
      - description: get categorys by id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Category successfully erased.
          schema:
            $ref: '#/definitions/models.Category'
      summary: Delete categories
      tags:
      - categories
    get:
      description: Return the category whose catId value matches id.
      parameters:
      - description: get categories by id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Category found successfully.
          schema:
            $ref: '#/definitions/models.Category'
      summary: Get Single Categories by id.
      tags:
      - categories
  /marks:
    get:
      description: Return list of marks.
      responses:
        "200":
          description: Marks recuperadas exitosamente.
          schema:
            type: obejct
      summary: Get All marks.
      tags:
      - marks
    post:
      description: Save marks data in Db.
      parameters:
      - description: Create marks
        in: body
        name: marks
        required: true
        schema:
          $ref: '#/definitions/mark.AddMarkBody'
      produces:
      - application/json
      responses:
        "200":
          description: successfully created mark.
          schema:
            $ref: '#/definitions/models.Mark'
      summary: Create marks
      tags:
      - marks
    put:
      description: Update marks data.
      parameters:
      - description: Update tags
        in: body
        name: marks
        required: true
        schema:
          $ref: '#/definitions/product.UpdateMarkBody'
      produces:
      - application/json
      responses:
        "200":
          description: Mark updated successfully.
          schema:
            $ref: '#/definitions/models.Mark'
      summary: Update marks
      tags:
      - marks
  /marks/{id}:
    delete:
      description: Remove marks data by id.
      parameters:
      - description: get marks by id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Mark successfully erased.
          schema:
            $ref: '#/definitions/models.Mark'
      summary: Delete marks
      tags:
      - marks
    get:
      description: Return the mark whose marId value matches id.
      parameters:
      - description: get marks by id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Mark found successfully.
          schema:
            $ref: '#/definitions/models.Mark'
      summary: Get Single Marks by id.
      tags:
      - marks
  /products:
    post:
      description: Save products data in Db.
      parameters:
      - description: Create products
        in: body
        name: products
        required: true
        schema:
          $ref: '#/definitions/product.AddProductBody'
      produces:
      - application/json
      responses:
        "200":
          description: successfully created product.
          schema:
            $ref: '#/definitions/models.Product'
      summary: Create products
      tags:
      - products
  /taxs:
    get:
      description: Return list of taxs.
      responses:
        "200":
          description: Taxs successfully recovered.
          schema:
            type: obejct
      summary: Get All taxs.
      tags:
      - taxs
    post:
      description: Save taxs data in Db.
      parameters:
      - description: Create taxs
        in: body
        name: taxs
        required: true
        schema:
          $ref: '#/definitions/tax.AddTaxBody'
      produces:
      - application/json
      responses:
        "200":
          description: successfully created tax.
          schema:
            $ref: '#/definitions/models.Tax'
      summary: Create taxs
      tags:
      - taxs
    put:
      description: Update taxs data.
      parameters:
      - description: Update tags
        in: body
        name: taxs
        required: true
        schema:
          $ref: '#/definitions/tax.UpdateTaxBody'
      produces:
      - application/json
      responses:
        "200":
          description: Tax updated successfully.
          schema:
            $ref: '#/definitions/models.Tax'
      summary: Update taxs
      tags:
      - taxs
  /taxs/{id}:
    delete:
      description: Remove taxs data by id.
      parameters:
      - description: get taxs by id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tax successfully erased.
          schema:
            $ref: '#/definitions/models.Tax'
      summary: Delete taxs
      tags:
      - taxs
    get:
      description: Return the tax whose taxId value matches id.
      parameters:
      - description: get taxs by id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tax found successfully.
          schema:
            $ref: '#/definitions/models.Tax'
      summary: Get Single Taxs by id.
      tags:
      - taxs
  /unit_measures:
    get:
      description: Return list of unit_measures.
      responses:
        "200":
          description: Unit_Measures recuperadas exitosamente.
          schema:
            type: obejct
      summary: Get All unit_measures.
      tags:
      - unit_measures
    post:
      description: Save unit_measures data in Db.
      parameters:
      - description: Create unit_measures
        in: body
        name: unit_measures
        required: true
        schema:
          $ref: '#/definitions/unit_measure.AddUnit_MeasureBody'
      produces:
      - application/json
      responses:
        "200":
          description: successfully created unit_measure.
          schema:
            $ref: '#/definitions/models.Unit_Measure'
      summary: Create unit_measures
      tags:
      - unit_measures
    put:
      description: Update unit_measures data.
      parameters:
      - description: Update tags
        in: body
        name: unit_measures
        required: true
        schema:
          $ref: '#/definitions/unit_measure.UpdateUnit_MeasureBody'
      produces:
      - application/json
      responses:
        "200":
          description: Unit_Measure updated successfully.
          schema:
            $ref: '#/definitions/models.Unit_Measure'
      summary: Update unit_measures
      tags:
      - unit_measures
  /unit_measures/{id}:
    delete:
      description: Remove unit_measures data by id.
      parameters:
      - description: get unit_measures by id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Unit_Measure successfully erased.
          schema:
            $ref: '#/definitions/models.Unit_Measure'
      summary: Delete unit_measures
      tags:
      - unit_measures
    get:
      description: Return the unit_measure whose uniId value matches id.
      parameters:
      - description: get unit_Measures by id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Unit_Measure found successfully.
          schema:
            $ref: '#/definitions/models.Unit_Measure'
      summary: Get Single Unit_Measures by id.
      tags:
      - unit_measures
swagger: "2.0"
