basePath: /api
definitions:
  category.AddCategoryBody:
    properties:
      cat_name:
        type: string
    type: object
  category.UpdateCategoryBody:
    properties:
      cat_name:
        type: string
    type: object
  company.AddCompanyBody:
    type: object
  company.UpdateCompanyBody:
    type: object
  mark.AddMarkBody:
    properties:
      mar_name:
        type: string
    type: object
  mark.UpdateMarkBody:
    properties:
      id:
        type: integer
      mar_name:
        type: string
    type: object
  product.AddProductBody:
    type: object
  product.UpdateProductBody:
    type: object
  tax.AddTaxBody:
    type: object
  tax.UpdateTaxBody:
    type: object
  unit_measure.AddUnit_MeasureBody:
    type: object
  unit_measure.UpdateUnit_MeasureBody:
    type: object
host: localhost:3000
info:
  contact: {}
  description: A Tag service API in Go using Gin framework
  title: Tag Service API
  version: "1.0"
paths:
  /categories:
    get:
      description: Return list of categories.
      responses:
        "200":
          description: Categories successfully recovered.
      summary: Get All categories.
      tags:
      - categories
    post:
      description: Save categories data in Db.
      parameters:
      - description: Create categorys
        in: body
        name: categories
        required: true
        schema:
          $ref: '#/definitions/category.AddCategoryBody'
      produces:
      - application/json
      responses:
        "200":
          description: successfully created category.
          schema:
            $ref: '#/definitions/category.AddCategoryBody'
      summary: Create categories
      tags:
      - categories
    put:
      description: Update categories data.
      parameters:
      - description: Update tags
        in: body
        name: categories
        required: true
        schema:
          $ref: '#/definitions/category.UpdateCategoryBody'
      produces:
      - application/json
      responses:
        "200":
          description: Category updated successfully.
          schema:
            $ref: '#/definitions/category.UpdateCategoryBody'
      summary: Update categories
      tags:
      - categories
  /categories/{id}:
    delete:
      description: Remove categories data by id.
      parameters:
      - description: get categorys by id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Category successfully erased.
      summary: Delete categories
      tags:
      - categories
    get:
      description: Return the category whose catId value matches id.
      parameters:
      - description: get categories by id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Category found successfully.
      summary: Get Single Categories by id.
      tags:
      - categories
  /companies:
    get:
      description: Return list of companies.
      responses:
        "200":
          description: Companies successfully recovered.
      summary: Get All companies.
      tags:
      - companies
    post:
      description: Save companies data in Db.
      parameters:
      - description: Create companies
        in: body
        name: companies
        required: true
        schema:
          $ref: '#/definitions/company.AddCompanyBody'
      produces:
      - application/json
      responses:
        "200":
          description: successfully created company.
          schema:
            $ref: '#/definitions/company.AddCompanyBody'
      summary: Create companies
      tags:
      - companies
    put:
      description: Update companies data.
      parameters:
      - description: Update tags
        in: body
        name: companies
        required: true
        schema:
          $ref: '#/definitions/company.UpdateCompanyBody'
      produces:
      - application/json
      responses:
        "200":
          description: Company updated successfully.
          schema:
            $ref: '#/definitions/company.UpdateCompanyBody'
      summary: Update companies
      tags:
      - companies
  /companies/{id}:
    delete:
      description: Remove companies data by id.
      parameters:
      - description: get companies by id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Company successfully erased.
      summary: Delete companies
      tags:
      - companies
    get:
      description: Return the company whose marId value matches id.
      parameters:
      - description: get companies by id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Company found successfully.
      summary: Get Single Companies by id.
      tags:
      - companies
  /marks:
    get:
      description: Return list of marks.
      responses:
        "200":
          description: Marks successfully recovered.
      summary: Get All marks.
      tags:
      - marks
    post:
      description: Save marks data in Db.
      parameters:
      - description: Create marks
        in: body
        name: marks
        required: true
        schema:
          $ref: '#/definitions/mark.AddMarkBody'
      produces:
      - application/json
      responses:
        "200":
          description: successfully created mark.
          schema:
            $ref: '#/definitions/mark.AddMarkBody'
      summary: Create marks
      tags:
      - marks
    put:
      description: Update marks data.
      parameters:
      - description: Update marks
        in: body
        name: marks
        required: true
        schema:
          $ref: '#/definitions/mark.UpdateMarkBody'
      produces:
      - application/json
      responses:
        "200":
          description: Mark updated successfully.
          schema:
            $ref: '#/definitions/mark.UpdateMarkBody'
      summary: Update marks
      tags:
      - marks
  /marks/{id}:
    delete:
      description: Remove marks data by id.
      parameters:
      - description: get marks by id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Mark successfully erased.
      summary: Delete marks
      tags:
      - marks
    get:
      description: Return the mark whose marId value matches id.
      parameters:
      - description: get marks by id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Mark found successfully.
      summary: Get Single Marks by id.
      tags:
      - marks
  /products:
    post:
      description: Save products data in Db.
      parameters:
      - description: Create products
        in: body
        name: products
        required: true
        schema:
          $ref: '#/definitions/product.AddProductBody'
      produces:
      - application/json
      responses:
        "200":
          description: successfully created product.
          schema:
            $ref: '#/definitions/product.AddProductBody'
      summary: Create products
      tags:
      - products
    put:
      description: Update products data.
      parameters:
      - description: Update tags
        in: body
        name: products
        required: true
        schema:
          $ref: '#/definitions/product.UpdateProductBody'
      produces:
      - application/json
      responses:
        "200":
          description: Product updated successfully.
          schema:
            $ref: '#/definitions/product.UpdateProductBody'
      summary: Update products
      tags:
      - products
  /taxs:
    get:
      description: Return list of taxs.
      responses:
        "200":
          description: Taxs successfully recovered.
      summary: Get All taxs.
      tags:
      - taxs
    post:
      description: Save taxs data in Db.
      parameters:
      - description: Create taxs
        in: body
        name: taxs
        required: true
        schema:
          $ref: '#/definitions/tax.AddTaxBody'
      produces:
      - application/json
      responses:
        "200":
          description: successfully created tax.
          schema:
            $ref: '#/definitions/tax.AddTaxBody'
      summary: Create taxs
      tags:
      - taxs
    put:
      description: Update taxs data.
      parameters:
      - description: Update tags
        in: body
        name: taxs
        required: true
        schema:
          $ref: '#/definitions/tax.UpdateTaxBody'
      produces:
      - application/json
      responses:
        "200":
          description: Tax updated successfully.
          schema:
            $ref: '#/definitions/tax.UpdateTaxBody'
      summary: Update taxs
      tags:
      - taxs
  /taxs/{id}:
    delete:
      description: Remove taxs data by id.
      parameters:
      - description: get taxs by id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tax successfully erased.
      summary: Delete taxs
      tags:
      - taxs
    get:
      description: Return the tax whose taxId value matches id.
      parameters:
      - description: get taxs by id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tax found successfully.
      summary: Get Single Taxs by id.
      tags:
      - taxs
  /unit_measures:
    get:
      description: Return list of unit_measures.
      responses:
        "200":
          description: Unit_Measures successfully recovered.
      summary: Get All unit_measures.
      tags:
      - unit_measures
    post:
      description: Save unit_measures data in Db.
      parameters:
      - description: Create unit_measures
        in: body
        name: unit_measures
        required: true
        schema:
          $ref: '#/definitions/unit_measure.AddUnit_MeasureBody'
      produces:
      - application/json
      responses:
        "200":
          description: successfully created unit_measure.
          schema:
            $ref: '#/definitions/unit_measure.AddUnit_MeasureBody'
      summary: Create unit_measures
      tags:
      - unit_measures
    put:
      description: Update unit_measures data.
      parameters:
      - description: Update tags
        in: body
        name: unit_measures
        required: true
        schema:
          $ref: '#/definitions/unit_measure.UpdateUnit_MeasureBody'
      produces:
      - application/json
      responses:
        "200":
          description: Unit_Measure updated successfully.
          schema:
            $ref: '#/definitions/unit_measure.UpdateUnit_MeasureBody'
      summary: Update unit_measures
      tags:
      - unit_measures
  /unit_measures/{id}:
    delete:
      description: Remove unit_measures data by id.
      parameters:
      - description: get unit_measures by id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Unit_Measure successfully erased.
      summary: Delete unit_measures
      tags:
      - unit_measures
    get:
      description: Return the unit_measure whose uniId value matches id.
      parameters:
      - description: get unit_Measures by id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Unit_Measure found successfully.
      summary: Get Single Unit_Measures by id.
      tags:
      - unit_measures
swagger: "2.0"
